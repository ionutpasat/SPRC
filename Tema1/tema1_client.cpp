/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "tema1.h"

// Create a list to store the requests
list<pair<string, pair<string, string>>> requests;
unordered_map<string, vector<string>> users;


void
tema1_prog_1(char *host)
{
	CLIENT *clnt;
	char * request_authorization_1_arg;
	char * *result_1;
	char * approve_request_token_1_arg;
	struct approve_request_response  *result_4;
	struct request_access_arg  request_access_token_1_arg;
	struct request_access_response  *result_2;
	struct validate_action_arg  validate_delegated_action_1_arg;
	struct validate_action_response  *result_3;

#ifndef	DEBUG
	clnt = clnt_create (host, tema1_prog, tema1_vers, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	for (const auto& request : requests) {
        if (request.second.first == REQUEST) {
			request_authorization_1_arg = (char *)request.first.c_str();
			result_1 = request_authorization_1(&request_authorization_1_arg, clnt);
			if (result_1 == (char **) NULL) {
				clnt_perror (clnt, "call failed");
			}
			string response = string(*result_1);
			if (response == USER_NOT_FOUND) {
				cout << USER_NOT_FOUND << endl;
				continue;
			} else {
				users[request.first].push_back(response);
				approve_request_token_1_arg = (char *)response.c_str();
				result_4 = approve_request_token_1(&approve_request_token_1_arg, clnt);
				if (result_4 == (struct approve_request_response *) NULL) {
					clnt_perror (clnt, "call failed");
				}
				if (result_4->with_sign == 0) {
					cout << REQUEST_DENIED << endl;
					continue;
				} else {
					cout << response << " -> ";
				}
				// request_access_token_1_arg.name = (char *)malloc(sizeof(char) * request.first.length());
				// request_access_token_1_arg.request_token =(char *) malloc(sizeof(char) * TOKEN_SIZE);
				request_access_token_1_arg.name = (char *)request.first.c_str();
				request_access_token_1_arg.request_token = (char *)response.c_str();
				request_access_token_1_arg.with_refresh = stoi(request.second.second);
				result_2 = request_access_token_1(&request_access_token_1_arg, clnt);
				if (result_2 == (struct request_access_response *) NULL) {
					clnt_perror (clnt, "call failed");
				}
				cout << result_2->access_token;
				if (string(result_2->refresh_token) == (char *)NO_REFRESH_TOKEN) {
					cout << endl;
				} else {
					cout << "," << result_2->refresh_token << endl;
				}
			}

		}
    }
	// result_3 = validate_delegated_action_1(&validate_delegated_action_1_arg, clnt);
	// if (result_3 == (struct validate_action_response *) NULL) {
	// 	clnt_perror (clnt, "call failed");
	// }
	// result_4 = approve_request_token_1(&approve_request_token_1_arg, clnt);
	// if (result_4 == (struct approve_request_response *) NULL) {
	// 	clnt_perror (clnt, "call failed");
	// }
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];

	ifstream inputFile(argv[2]); // Replace "your_file_path.txt" with the actual path to your file
    if (!inputFile.is_open()) {
        cerr << "Unable to open the file." << endl;
        return 1;
    }

    // Read each line from the file
    string line;
    while (getline(inputFile, line)) {
        istringstream iss(line);

        // Parse the comma-separated values
        string client_id, operation_str, third_str;
        getline(iss, client_id, ',');
        getline(iss, operation_str, ',');
        getline(iss, third_str, ',');
		// Add the requests as a pair to the list
		requests.push_back({client_id, {operation_str, third_str}});

    }

    // Close the file
    inputFile.close();

    // Print the stored requests
    // for (const auto& entry : requests) {
    //     cout << "Client ID: " << entry.first << ", Operation: " << entry.second.first
    //          << ", With Refresh: " << entry.second.second << endl;
    // }

	tema1_prog_1 (host);
    return 0;
}
