Tema2 SPRC - Pasat Ionut 344C1

Flow-ul aplicatiei este destul de explicit descris prin comentariile adaugate in aplicatie.
___Scurta prezentare generala a implementarii___
Structura si implementarea logicii de containerizare a fost inspirata de aici:
https://www.youtube.com/watch?v=fHQWTsWqBdE&t=1535s -> 
-> https://github.com/FrancescoXX/flask-crud-live/tree/main
___Tehnologii folosite___
PostgresSql - pentru stocarea informatiilor intr-un sistem de baze de date.
Python Flask si Requests - pentru implementarea api-urilor
SqlAlchemy - pentru utilizarea si lucrul cu informatiile din baza de date
DBeaver - pentru management-ul local al bazei de date

___Creare tabele___
Pentru a crea tabelele am folosit clase in python instiintand baza de date ca acestea
sunt tabele prin atributul db.Model.
Am tinut cont de toate restrictiile si constrangerile preciate in enuntul temei:
mai exact cele de primaryKey, foreignKey si timestamp.
Pentru eventualele interogari am implementat metoda json, care impacheteaza entitatea
explicit cum este implementat in metoda (un exemplu similar dar nu pentru lucrul cu db
ar fi toString din Java)

___Request-uri POST___
Acestea le am generalizat in felul urmator:
- Daca nr. field-urilor din request sau numele acestora nu se potriveste cu ce se asteapta -> 400
- Daca totul decurge ok, request-ul este procesat si executat -> 200
- Daca se intalneste o exceptie in timpul executiei -> 409
- In cazul entitatilor care au foreign key (ex. orase sau temperaturi) se verifica daca entitatea
vizata de foreign key exista, daca nu exista -> 404

___Request-uri GET___
Acestea le am generalizat in felul urmator:
- Daca ce se interogheaza din baza de date exista se intoarce acea/acele entitate/entitati -> 200
- Daca nu exista se intoarce un obiect/lista gol/goala -> 200

___Request-uri PUT___
Acestea le am generalizat in felul urmator:
- Daca nr. field-urilor din request sau numele acestora nu se potriveste cu ce se asteapta -> 400
- Daca totul decurge ok, request-ul este procesat si executat -> 200
- Daca entitatea care se actualizeaza nu exista -> 404
- Daca se intalneste o exceptie in timpul executiei -> 409

___Request-uri DELETE___
Acestea le am generalizat in felul urmator:
- Daca id-ul dat ca path variable este null, nu e de tip intreg sau e mai mic decat 0 -> 400
- Daca totul decurge ok, request-ul este procesat si executat -> 200
- Daca entitatea care se sterge nu exista -> 404
- Daca se intalneste o exceptie in timpul executiei -> 409

___Rulare aplicatie___
- Dependente: docker, docker-compose, make & python3

1) Creare serviciu baza de date:
    $ make db
2) Creare serviciu utilitar baza de date:
    $ make cloudbeaver
3) Creare serviciu si rulare aplicatie:
    $ make app
4) Daca se modifica ceva in aplicatie: 
    CTRL + C -> $ make app
5) Oprire aplicatie si inchidere container
    CTRL + C -> $ make stop

___Configurare DBeaver___
- Select Connect by Host
- Enter Host: localhost
        Database: postgres
        Port: 5432
- Authentication: Database Native
    Username: postgres
    Password: postgres
- In arhiva este inclus si un screenshot cu configurarea pentru simplitate (dbeaver.jpg)
